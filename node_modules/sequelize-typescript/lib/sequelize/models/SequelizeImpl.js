"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const OriginSequelize = require("sequelize");
const Model_1 = require("../../model/models/Model");
const models_1 = require("../../model/models");
const Table_1 = require("../../model/annotations/Table");
const hooks_1 = require("../../hooks/hooks");
const association_1 = require("../../associations/association");
const scopes_1 = require("../../scopes/scopes");
const sequelize_1 = require("../sequelize");
exports._OriginSequelize = OriginSequelize;
class SequelizeImpl extends exports._OriginSequelize {
    constructor(options) {
        if (typeof options === "string") {
            super(options);
        }
        else if (sequelize_1.hasSequelizeUri(options)) {
            super(options.url, options);
        }
        else {
            super(sequelize_1.prepareOptions(options));
        }
        this.throughMap = {};
        this._ = this.models = {};
        if (typeof options !== "string") {
            this.init(options);
        }
    }
    init(options) {
        const sequelizeOptions = options;
        const deprecatedOptions = options;
        if (sequelizeOptions.models)
            this.addModels(sequelizeOptions.models);
        if (deprecatedOptions.modelPaths)
            this.addModels(deprecatedOptions.modelPaths);
    }
    addModels(arg) {
        const models = models_1.getModels(arg);
        this.defineModels(models);
        this.associateModels(models);
        scopes_1.resolveScopes(models);
        hooks_1.installHooks(models);
        models.forEach(model => this.models[model.name] = model);
    }
    /**
     * Processes model associations
     */
    associateModels(models) {
        models.forEach(model => {
            const associations = association_1.getAssociations(model.prototype);
            if (!associations)
                return;
            associations.forEach(association => {
                association.init(model, this);
                const associatedClass = association.getAssociatedClass();
                const relation = association.getAssociation();
                const options = association.getSequelizeOptions();
                model[relation](associatedClass, options);
            });
        });
    }
    getThroughModel(through) {
        // tslint:disable:max-classes-per-file
        let Through = class Through extends Model_1.Model {
        };
        Through = __decorate([
            Table_1.Table({ tableName: through, modelName: through })
        ], Through);
        return Through;
    }
    /**
     * Creates sequelize models and registers these models
     * in the registry
     */
    defineModels(models) {
        models.forEach(model => {
            const modelName = models_1.getModelName(model.prototype);
            const attributes = models_1.getAttributes(model.prototype);
            const options = models_1.getOptions(model.prototype);
            if (!options)
                throw new Error(`@Table annotation is missing on class "${model['name']}"`);
            options['modelName'] = modelName;
            options['sequelize'] = this;
            model['init'](attributes, options);
        });
    }
}
exports.SequelizeImpl = SequelizeImpl;
//# sourceMappingURL=SequelizeImpl.js.map