"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const association_1 = require("../association");
const ModelNotInitializedError_1 = require("../../common/errors/ModelNotInitializedError");
class BaseAssociation {
    constructor(associatedClassGetter) {
        this.associatedClassGetter = associatedClassGetter;
    }
    getAssociatedClass() {
        const modelClass = this.associatedClassGetter();
        if (!modelClass.isInitialized) {
            throw new ModelNotInitializedError_1.ModelNotInitializedError(modelClass, {
                cause: 'before association can be resolved.'
            });
        }
        return modelClass;
    }
    init(model, sequelize) {
        if (!this._options) {
            this._options = this.getPreparedOptions(model, sequelize);
        }
    }
    getSequelizeOptions() {
        if (!this._options) {
            throw new Error(`Association need to be initialized with a sequelize instance`);
        }
        return this._options;
    }
    getForeignKeyOptions(relatedClass, classWithForeignKey, foreignKey) {
        let foreignKeyOptions = {};
        if (typeof foreignKey === 'string') {
            foreignKeyOptions.name = foreignKey;
        }
        else if (foreignKey && typeof foreignKey === 'object') {
            foreignKeyOptions = Object.assign({}, foreignKey);
        }
        if (!foreignKeyOptions.name) {
            const foreignKeys = association_1.getForeignKeys(classWithForeignKey.prototype) || [];
            for (const key of foreignKeys) {
                if (key.relatedClassGetter() === relatedClass) {
                    foreignKeyOptions.name = key.foreignKey;
                    break;
                }
            }
            if (!foreignKeyOptions.name) {
                throw new Error(`Foreign key for "${relatedClass.name}" is missing ` +
                    `on "${classWithForeignKey.name}".`);
            }
        }
        return foreignKeyOptions;
    }
}
exports.BaseAssociation = BaseAssociation;
//# sourceMappingURL=BaseAssociation.js.map