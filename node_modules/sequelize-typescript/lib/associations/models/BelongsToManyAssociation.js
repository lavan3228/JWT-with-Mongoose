"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseAssociation_1 = require("./BaseAssociation");
const Association_1 = require("../enums/Association");
const ModelNotInitializedError_1 = require("../../common/errors/ModelNotInitializedError");
class BelongsToManyAssociation extends BaseAssociation_1.BaseAssociation {
    constructor(associatedClassGetter, options) {
        super(associatedClassGetter);
        this.options = options;
    }
    getAssociation() {
        return Association_1.Association.BelongsToMany;
    }
    getPreparedOptions(modelClass, sequelize) {
        const options = Object.assign({}, this.options);
        const associatedClass = this.getAssociatedClass();
        const throughOptions = this.getThroughOptions(modelClass, sequelize);
        options.through = throughOptions;
        options.foreignKey = this.getForeignKeyOptions(modelClass, throughOptions.model, this.options.foreignKey);
        options.otherKey = this.getForeignKeyOptions(associatedClass, throughOptions.model, this.options.otherKey);
        return options;
    }
    getThroughOptions(modelClass, sequelize) {
        const through = this.options.through;
        const model = typeof through === 'object' ? through.model : through;
        const throughOptions = typeof through === 'object' ? Object.assign({}, through) : {};
        if (typeof model === 'function') {
            const throughModelClass = model();
            if (!throughModelClass.isInitialized) {
                throw new ModelNotInitializedError_1.ModelNotInitializedError(throughModelClass, {
                    cause: 'before association can be resolved.'
                });
            }
            throughOptions.model = throughModelClass;
        }
        else if (typeof model === 'string') {
            if (!sequelize.throughMap[model]) {
                const throughModel = sequelize.getThroughModel(model);
                sequelize.addModels([throughModel]);
                sequelize.throughMap[model] = throughModel;
            }
            throughOptions.model = sequelize.throughMap[model];
        }
        else {
            throw new Error(`Through model is missing for belongs to many association on ${modelClass.name}`);
        }
        return throughOptions;
    }
}
exports.BelongsToManyAssociation = BelongsToManyAssociation;
//# sourceMappingURL=BelongsToManyAssociation.js.map