/// <reference types="bluebird" />
import * as Promise from 'bluebird';
import { IDummyConstructor } from "../../common/interfaces/IDummyConstructor";
import { IFindOptions } from '..';
import { IAssociationActionOptions } from '../../associations/interfaces/IAssociationActionOptions';
export declare const _SeqModel: IDummyConstructor;
/**
 * Indicates which static methods of Model has to be proxied,
 * to prepare include option to automatically resolve alias;
 * The index represents the index of the options of the
 * corresponding method parameter
 */
export declare const INFER_ALIAS_MAP: {
    bulkBuild: number;
    build: number;
    create: number;
    aggregate: number;
    all: number;
    find: number;
    findAll: number;
    findAndCount: number;
    findAndCountAll: number;
    findById: number;
    findByPrimary: number;
    findCreateFind: number;
    findOne: number;
    findOrBuild: number;
    findOrCreate: number;
    findOrInitialize: number;
    reload: number;
};
export declare class ModelImpl extends _SeqModel {
    static isInitialized: boolean;
    static init(...args: any[]): void;
    static addThrowNotInitializedProxy(): void;
    static addInferAliasOverrides(): void;
    constructor(values?: any, options?: any);
    /**
     * Adds relation between specified instances and source instance
     */
    $add(propertyKey: string, instances: any, options?: IAssociationActionOptions): Promise<this>;
    /**
     * Sets relation between specified instances and source instance
     * (replaces old relations)
     */
    $set(propertyKey: string, instances: any, options: any): Promise<this>;
    /**
     * Returns related instance (specified by propertyKey) of source instance
     */
    $get(propertyKey: string, options: any): Promise<this>;
    /**
     * Counts related instances (specified by propertyKey) of source instance
     */
    $count(propertyKey: string, options: any): Promise<this>;
    /**
     * Creates instances and relate them to source instance
     */
    $create(propertyKey: string, values: any, options: any): Promise<this>;
    /**
     * Checks if specified instances is related to source instance
     */
    $has(propertyKey: string, instances: any, options: any): Promise<this>;
    /**
     * Removes specified instances from source instance
     */
    $remove(propertyKey: string, instances: any, options: any): Promise<this>;
    /**
     * Overridden due to infer alias from options is required
     *
     * SEE DETAILS FOR ACTUAL FUNCTIONALITY ON DECLARATION FILE
     */
    reload(options?: IFindOptions<typeof ModelImpl>): Promise<this>;
}
